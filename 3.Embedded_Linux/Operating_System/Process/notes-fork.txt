Points to Remember : 

1 . System call fork() is used to create processes.

2.  It takes no arguments and returns a process ID.

3. The purpose of fork() is to create a new process, which becomes the child process of the caller. 

4. After a new child process is created, both processes will 
execute the next instruction following the fork() system call.

5. Therefore, we have to distinguish the parent from the child. 
This can be done by testing the returned value of fork().

Return Values:
-------------------------------------------------------------------------------------

If fork() returns a negative value, the creation of a child process was unsuccessful. 

fork() returns a zero to the newly created child process. 

fork() returns a positive value, the process ID of the child process, to the parent. 

The returned process ID is of type pid_t defined in sys/types.h. 
Normally, the process ID is an integer. Moreover, a process can use 
function getpid() to retrieve the process ID assigned to this process. 
--------------------------------------------------------------------------------------


Note:
A child process uses the same:
pc(program counter), 
same CPU registers, 
same open files which use in the parent process.

----------------------------------------------------------------
Since every process has its own address space, 
any modifications will be independent of the others. 
In other words, if the parent changes the value of its variable, 
the modification will only affect the variable in the parent process's address space. 
Other address spaces created by fork() calls will not be affected 
even though they have identical variable names. 
------------------------------------------------------------------------------------